{"ast":null,"code":"var _jsxFileName = \"/Users/johnshirey/Bootcamp/GitHub-Repos/react__portfolio/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// server.js (or index.js)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst nodemailer = require('nodemailer');\nconst app = express();\napp.use(bodyParser.json());\n\n// SMTP Configuration\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.gmail.com',\n  port: 465,\n  secure: true,\n  // Use SSL\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-password'\n  }\n});\napp.post('/api/send-email', (req, res) => {\n  const {\n    name,\n    email,\n    message\n  } = req.body;\n\n  // Configure the email message\n  const mailOptions = {\n    from: 'your-email@gmail.com',\n    to: 'recipient@example.com',\n    subject: 'New Contact Form Submission',\n    text: `\n      Name: ${name}\n      Email: ${email}\n      Message: ${message}\n    `\n  };\n\n  // Send the email\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      console.error('Error:', error);\n      res.status(500).json({\n        message: 'Failed to send email'\n      });\n    } else {\n      console.log('Email sent:', info.response);\n      res.json({\n        message: 'Email sent successfully'\n      });\n    }\n  });\n});\nconst port = 3001; // Set the desired port number\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","express","require","bodyParser","nodemailer","app","use","json","transporter","createTransport","host","port","secure","auth","user","pass","post","req","res","name","email","message","body","mailOptions","from","to","subject","text","sendMail","error","info","console","status","log","response","listen","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/johnshirey/Bootcamp/GitHub-Repos/react__portfolio/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// server.js (or index.js)\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// SMTP Configuration\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.gmail.com',\n  port: 465,\n  secure: true, // Use SSL\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-password',\n  },\n});\n\napp.post('/api/send-email', (req, res) => {\n  const { name, email, message } = req.body;\n\n  // Configure the email message\n  const mailOptions = {\n    from: 'your-email@gmail.com',\n    to: 'recipient@example.com',\n    subject: 'New Contact Form Submission',\n    text: `\n      Name: ${name}\n      Email: ${email}\n      Message: ${message}\n    `,\n  };\n\n  // Send the email\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      console.error('Error:', error);\n      res.status(500).json({ message: 'Failed to send email' });\n    } else {\n      console.log('Email sent:', info.response);\n      res.json({ message: 'Email sent successfully' });\n    }\n  });\n});\n\nconst port = 3001; // Set the desired port number\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;AAExC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrBI,GAAG,CAACC,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACA,MAAMC,WAAW,GAAGJ,UAAU,CAACK,eAAe,CAAC;EAC7CC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,IAAI;EAAE;EACdC,IAAI,EAAE;IACJC,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEFV,GAAG,CAACW,IAAI,CAAC,iBAAiB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGJ,GAAG,CAACK,IAAI;;EAEzC;EACA,MAAMC,WAAW,GAAG;IAClBC,IAAI,EAAE,sBAAsB;IAC5BC,EAAE,EAAE,uBAAuB;IAC3BC,OAAO,EAAE,6BAA6B;IACtCC,IAAI,EAAG;AACX,cAAcR,IAAK;AACnB,eAAeC,KAAM;AACrB,iBAAiBC,OAAQ;AACzB;EACE,CAAC;;EAED;EACAb,WAAW,CAACoB,QAAQ,CAACL,WAAW,EAAE,CAACM,KAAK,EAAEC,IAAI,KAAK;IACjD,IAAID,KAAK,EAAE;MACTE,OAAO,CAACF,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BX,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACzB,IAAI,CAAC;QAAEc,OAAO,EAAE;MAAuB,CAAC,CAAC;IAC3D,CAAC,MAAM;MACLU,OAAO,CAACE,GAAG,CAAC,aAAa,EAAEH,IAAI,CAACI,QAAQ,CAAC;MACzChB,GAAG,CAACX,IAAI,CAAC;QAAEc,OAAO,EAAE;MAA0B,CAAC,CAAC;IAClD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMV,IAAI,GAAG,IAAI,CAAC,CAAC;AACnBN,GAAG,CAAC8B,MAAM,CAACxB,IAAI,EAAE,MAAM;EACrBoB,OAAO,CAACE,GAAG,CAAE,6BAA4BtB,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC;AAGF,MAAMyB,IAAI,GAAGxC,QAAQ,CAACyC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTxC,OAAA,CAACL,KAAK,CAAC8C,UAAU;EAAAC,QAAA,eACf1C,OAAA,CAACH,GAAG;IAAA8C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACAhD,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}